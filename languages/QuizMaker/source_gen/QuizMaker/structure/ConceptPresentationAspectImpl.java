package QuizMaker.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ConnectConnection;
  private ConceptPresentation props_ConnectGame;
  private ConceptPresentation props_ConnectQuestion;
  private ConceptPresentation props_OneWrongGame;
  private ConceptPresentation props_OneWrongQuestion;
  private ConceptPresentation props_Question;
  private ConceptPresentation props_Quiz;
  private ConceptPresentation props_ThreeAnswersQuestion;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConnectConnection:
        if (props_ConnectConnection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConnectConnection");
          props_ConnectConnection = cpb.create();
        }
        return props_ConnectConnection;
      case LanguageConceptSwitch.ConnectGame:
        if (props_ConnectGame == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConnectGame = cpb.create();
        }
        return props_ConnectGame;
      case LanguageConceptSwitch.ConnectQuestion:
        if (props_ConnectQuestion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConnectQuestion");
          props_ConnectQuestion = cpb.create();
        }
        return props_ConnectQuestion;
      case LanguageConceptSwitch.OneWrongGame:
        if (props_OneWrongGame == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OneWrongGame = cpb.create();
        }
        return props_OneWrongGame;
      case LanguageConceptSwitch.OneWrongQuestion:
        if (props_OneWrongQuestion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OneWrongQuestion");
          props_OneWrongQuestion = cpb.create();
        }
        return props_OneWrongQuestion;
      case LanguageConceptSwitch.Question:
        if (props_Question == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Question = cpb.create();
        }
        return props_Question;
      case LanguageConceptSwitch.Quiz:
        if (props_Quiz == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Quiz = cpb.create();
        }
        return props_Quiz;
      case LanguageConceptSwitch.ThreeAnswersQuestion:
        if (props_ThreeAnswersQuestion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("threeAnswerQuestion");
          props_ThreeAnswersQuestion = cpb.create();
        }
        return props_ThreeAnswersQuestion;
    }
    return null;
  }
}
