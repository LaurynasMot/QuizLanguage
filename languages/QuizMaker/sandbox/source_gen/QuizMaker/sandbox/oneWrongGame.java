package QuizMaker.sandbox;

/*Generated by MPS */

import org.mini2Dx.desktop.DesktopMini2DxConfig;
import com.badlogic.gdx.backends.lwjgl.DesktopMini2DxGame;
import org.mini2Dx.core.game.BasicGame;
import java.util.ArrayList;
import org.mini2Dx.core.graphics.Sprite;
import java.net.URL;
import java.io.File;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.Gdx;
import java.net.URISyntaxException;
import com.badlogic.gdx.Input;
import org.mini2Dx.core.graphics.Graphics;
import java.util.Random;

public class oneWrongGame {
  public static void main(String[] args) {
    DesktopMini2DxConfig config = new DesktopMini2DxConfig(OneWrongGame.GAME_IDENTIFIER);
    config.vSyncEnabled = true;
    config.resizable = false;
    new DesktopMini2DxGame(new OneWrongGame(), config);
  }

  public static class OneWrongGame extends BasicGame {

    /*package*/ ArrayList<OneWrongGame.Question> questions = new ArrayList();
    public static final String GAME_IDENTIFIER = "com.mystudio.oneWrongGame";
    private int questionNumber = -1;
    private boolean isAnswered = true;
    private boolean isDone = false;
    private double enemyHeight = 1;
    private double enemySpeed = 0.1;
    private Sprite backgroundImage;

    private String wrongAnswer = "A";
    private String correctAnswer1 = "A";
    private String correctAnswer2 = "A";
    private String correctAnswer3 = "A";
    private float oneQuestionSize = 0;
    private float playerSize = 0;


    @Override
    public void initialise() {
      URL u = getClass().getProtectionDomain().getCodeSource().getLocation();
      try {
        File f = new File(u.toURI());
        backgroundImage = new Sprite(new Texture(Gdx.files.internal(f.getParent() + "/background3.png")));
      } catch (URISyntaxException e) {
      }
      Gdx.graphics.setWindowedMode(800, 600);
      questions.add(new OneWrongGame.Question("Sveicarija", "Lietuva", "Estija", "Ispanija"));
      questions.add(new OneWrongGame.Question("1", "2", "6", "8"));
      questions.add(new OneWrongGame.Question("Mianmaras", "Tanzanija", "Kenija", "Egiptas"));
      questions.add(new OneWrongGame.Question("Metras", "Kilogramas", "Gramas", "Tona"));
      enemyHeight = Gdx.graphics.getHeight();
      enemySpeed = enemyHeight / (questions.size() * 400);
      oneQuestionSize = (float) Gdx.graphics.getHeight() / questions.size();
      playerSize = Gdx.graphics.getHeight();
      nextQuestion();
    }

    private void nextQuestion() {
      if (questions.size() > questionNumber + 1) {
        questionNumber++;
      } else {
        isDone = true;
      }
    }

    @Override
    public void update(float f) {
      if (!(isDone)) {
        enemyHeight = enemyHeight - enemySpeed;
        if (enemyHeight < 0) {
          isDone = true;
        }
        if (Gdx.input.isKeyJustPressed(Input.Keys.A)) {
          if (wrongAnswer.equals("A")) {
            playerSize -= oneQuestionSize;
            isAnswered = true;
            nextQuestion();
          } else {
            enemyHeight -= Gdx.graphics.getHeight() / questions.size() / 3;
          }
        }

        if (Gdx.input.isKeyJustPressed(Input.Keys.B)) {
          if (wrongAnswer.equals("B")) {
            playerSize -= oneQuestionSize;
            isAnswered = true;
            nextQuestion();
          } else {
            enemyHeight -= Gdx.graphics.getHeight() / questions.size() / 3;
          }
        }

        if (Gdx.input.isKeyJustPressed(Input.Keys.C)) {
          if (wrongAnswer.equals("C")) {
            playerSize -= oneQuestionSize;
            isAnswered = true;
            nextQuestion();
          } else {
            enemyHeight -= Gdx.graphics.getHeight() / questions.size() / 3;
          }
        }

        if (Gdx.input.isKeyJustPressed(Input.Keys.D)) {
          if (wrongAnswer.equals("D")) {
            playerSize -= oneQuestionSize;
            isAnswered = true;
            nextQuestion();
          } else {
            enemyHeight -= Gdx.graphics.getHeight() / questions.size() / 3;
          }
        }
      }
    }

    @Override
    public void interpolate(float f) {
    }

    @Override
    public void render(Graphics graphics) {
      graphics.drawSprite(backgroundImage, 0, 0);
      if (!(isDone)) {
        graphics.drawRect((float) (Gdx.graphics.getWidth() * 0.75), (float) enemyHeight, (float) (Gdx.graphics.getWidth() * 0.1), (float) (Gdx.graphics.getHeight() - enemyHeight));

        graphics.drawRect((float) (Gdx.graphics.getWidth() * 0.25), playerSize, (float) (Gdx.graphics.getWidth() * 0.1), Gdx.graphics.getHeight() - playerSize);


        OneWrongGame.Question question = questions.get(questionNumber);

        if (isAnswered) {
          wrongAnswer = getRandomLetter();
          if (wrongAnswer.equals("A")) {
            correctAnswer1 = "B";
            correctAnswer2 = "C";
            correctAnswer3 = "D";
          }
          if (wrongAnswer.equals("B")) {
            correctAnswer1 = "A";
            correctAnswer2 = "C";
            correctAnswer3 = "D";
          }
          if (wrongAnswer.equals("C")) {
            correctAnswer1 = "A";
            correctAnswer2 = "B";
            correctAnswer3 = "D";
          }
          if (wrongAnswer.equals("D")) {
            correctAnswer1 = "A";
            correctAnswer2 = "B";
            correctAnswer3 = "C";
          }
          isAnswered = false;
        }

        graphics.drawString(wrongAnswer + ". " + question.wrongAnswer, (float) ((wrongAnswer.equals("A") ? Gdx.graphics.getWidth() * 0.20 : (wrongAnswer.equals("B") ? Gdx.graphics.getWidth() * 0.40 : (wrongAnswer.equals("C") ? Gdx.graphics.getWidth() * 0.60 : Gdx.graphics.getWidth() * 0.8)))), (float) (Gdx.graphics.getHeight() * 0.1));

        graphics.drawString(correctAnswer1 + ". " + question.correctAnswer1, (float) ((correctAnswer1.equals("A") ? Gdx.graphics.getWidth() * 0.20 : (correctAnswer1.equals("B") ? Gdx.graphics.getWidth() * 0.40 : (correctAnswer1.equals("C") ? Gdx.graphics.getWidth() * 0.60 : Gdx.graphics.getWidth() * 0.8)))), (float) (Gdx.graphics.getHeight() * 0.1));

        graphics.drawString(correctAnswer2 + ". " + question.correctAnswer2, (float) ((correctAnswer2.equals("A") ? Gdx.graphics.getWidth() * 0.20 : (correctAnswer2.equals("B") ? Gdx.graphics.getWidth() * 0.40 : (correctAnswer2.equals("C") ? Gdx.graphics.getWidth() * 0.60 : Gdx.graphics.getWidth() * 0.8)))), (float) (Gdx.graphics.getHeight() * 0.1));

        graphics.drawString(correctAnswer3 + ". " + question.correctAnswer3, (float) ((correctAnswer3.equals("A") ? Gdx.graphics.getWidth() * 0.20 : (correctAnswer3.equals("B") ? Gdx.graphics.getWidth() * 0.40 : (correctAnswer3.equals("C") ? Gdx.graphics.getWidth() * 0.60 : Gdx.graphics.getWidth() * 0.8)))), (float) (Gdx.graphics.getHeight() * 0.1));
      } else {
        graphics.drawString("Game is completed! Your score is " + enemyHeight, Gdx.graphics.getWidth() / 2.0f, Gdx.graphics.getHeight() / 2.0f);
      }




    }

    private String getRandomLetter() {
      Random rand = new Random();
      int number = rand.nextInt(4) + 1;
      if (number == 1) {
        return "A";
      }
      if (number == 2) {
        return "B";
      }
      if (number == 3) {
        return "C";
      }
      if (number == 4) {
        return "D";
      }
      return "A";
    }

    public class Question {
      public String wrongAnswer;
      public String correctAnswer1;
      public String correctAnswer2;
      public String correctAnswer3;

      public Question(String wrongAnswer, String correctAnswer1, String correctAnswer2, String correctAnswer3) {
        this.wrongAnswer = wrongAnswer;
        this.correctAnswer1 = correctAnswer1;
        this.correctAnswer2 = correctAnswer2;
        this.correctAnswer3 = correctAnswer3;
      }


    }

  }
}
