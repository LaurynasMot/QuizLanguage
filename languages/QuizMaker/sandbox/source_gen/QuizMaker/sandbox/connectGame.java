package QuizMaker.sandbox;

/*Generated by MPS */

import org.mini2Dx.desktop.DesktopMini2DxConfig;
import com.badlogic.gdx.backends.lwjgl.DesktopMini2DxGame;
import org.mini2Dx.core.game.BasicGame;
import java.util.ArrayList;
import org.mini2Dx.core.graphics.Sprite;
import java.util.List;
import java.util.Arrays;
import java.net.URL;
import java.io.File;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.Gdx;
import java.net.URISyntaxException;
import com.badlogic.gdx.Input;
import org.mini2Dx.core.graphics.Graphics;
import com.badlogic.gdx.graphics.Color;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;

public class connectGame {

  public static void main(String[] args) {
    DesktopMini2DxConfig config = new DesktopMini2DxConfig(ConnectGame.GAME_IDENTIFIER);
    config.vSyncEnabled = true;
    config.resizable = false;
    new DesktopMini2DxGame(new ConnectGame(), config);
  }

  public static class ConnectGame extends BasicGame {
    public static final String GAME_IDENTIFIER = "com.mystudio.connectGame";
    /*package*/ ArrayList<ConnectGame.Question> questions = new ArrayList();
    private Sprite backgroundImage;
    private int questionNumber = -1;
    private boolean isAnswered = true;
    private boolean isDone = false;
    private boolean leftNodeChosen = false;
    private String leftNode = "";
    private String rightNode = "";
    private int totalScore = 0;
    /*package*/ List<Integer> firstNodeSequence = Arrays.asList(0, 1, 2);
    /*package*/ List<Integer> secondNodeSequence = Arrays.asList(0, 1, 2);
    private ArrayList<ConnectGame.Connection> addedConnections = new ArrayList();
    private ArrayList<ConnectGame.Connection> shownConnections = new ArrayList();
    private ArrayList<ConnectGame.Connection> chosenConnections = new ArrayList();
    private ArrayList<ConnectGame.LineConnection> lineConnections = new ArrayList();



    @Override
    public void initialise() {
      URL u = getClass().getProtectionDomain().getCodeSource().getLocation();
      try {
        File f = new File(u.toURI());
        backgroundImage = new Sprite(new Texture(Gdx.files.internal(f.getParent() + "/background2.jpeg")));
      } catch (URISyntaxException e) {
      }

      Gdx.graphics.setWindowedMode(800, 600);
      addedConnections.add(new ConnectGame.Connection("1251", "Mindaugo krikstas"));
      addedConnections.add(new ConnectGame.Connection("1385", "Krevos unija"));
      addedConnections.add(new ConnectGame.Connection("1410", "Zalgirio musis"));
      addedConnections.add(new ConnectGame.Connection("1993", "Ivestas litas"));
      addedConnections.add(new ConnectGame.Connection("1998", "Adamkaus inauguracija"));
      addedConnections.add(new ConnectGame.Connection("2004", "Lietuva tapo nato nare"));
      Integer noOfQuestions = addedConnections.size() / 3;
      for (int x = 0; x < noOfQuestions; x++) {
        ConnectGame.Question question = new ConnectGame.Question();
        question.addToList(addedConnections.get(x * 3));
        question.addToList(addedConnections.get(x * 3 + 1));
        question.addToList(addedConnections.get(x * 3 + 2));
        questions.add(question);
      }
      nextQuestion();
    }

    private void nextQuestion() {
      if (questions.size() > questionNumber + 1) {
        questionNumber++;
      } else {
        isDone = true;
      }
    }

    @Override
    public void update(float f) {
      if (Gdx.input.isKeyJustPressed(Input.Keys.A)) {
        if (!(leftNodeChosen)) {
          leftNode = "A";
          leftNodeChosen = true;
        }
      }

      if (Gdx.input.isKeyJustPressed(Input.Keys.B)) {
        if (!(leftNodeChosen)) {
          leftNode = "B";
          leftNodeChosen = true;
        }
      }

      if (Gdx.input.isKeyJustPressed(Input.Keys.C)) {
        if (!(leftNodeChosen)) {
          leftNode = "C";
          leftNodeChosen = true;
        }
      }

      if (Gdx.input.isKeyJustPressed(Input.Keys.NUMPAD_1)) {
        rightNode = "1";
        leftNodeChosen = false;
      }
      if (Gdx.input.isKeyJustPressed(Input.Keys.NUMPAD_2)) {
        rightNode = "2";
        leftNodeChosen = false;

      }
      if (Gdx.input.isKeyJustPressed(Input.Keys.NUMPAD_3)) {
        rightNode = "3";
        leftNodeChosen = false;

      }


      if (!(leftNode.isEmpty()) && !(rightNode.isEmpty())) {
        if (!(chosenConnections.contains(findConnectionByKeys(leftNode, rightNode)))) {
          chosenConnections.add(findConnectionByKeys(leftNode, rightNode));
          lineConnections.add(findLineConnectionsByKeys(leftNode, rightNode));
          leftNode = "";
          rightNode = "";
        }
      }
    }

    public ConnectGame.LineConnection findLineConnectionsByKeys(String leftNode, String rightNode) {
      double firstLineX = 0;
      double firstLineY = 0;
      double secondLineX = 0;
      double secondLineY = 0;

      if (leftNode.equals("A")) {
        firstLineX = Gdx.graphics.getWidth() * 0.1;
        firstLineY = Gdx.graphics.getHeight() * 0.25;
      }

      if (leftNode.equals("B")) {
        firstLineX = Gdx.graphics.getWidth() * 0.1;
        firstLineY = Gdx.graphics.getHeight() * 0.50;
      }

      if (leftNode.equals("C")) {
        firstLineX = Gdx.graphics.getWidth() * 0.1;
        firstLineY = Gdx.graphics.getHeight() * 0.75;
      }

      if (rightNode.equals("1")) {
        secondLineX = Gdx.graphics.getWidth() * 0.75;
        secondLineY = Gdx.graphics.getHeight() * 0.25;
      }

      if (rightNode.equals("2")) {
        secondLineX = Gdx.graphics.getWidth() * 0.75;
        secondLineY = Gdx.graphics.getHeight() * 0.50;
      }

      if (rightNode.equals("3")) {
        secondLineX = Gdx.graphics.getWidth() * 0.75;
        secondLineY = Gdx.graphics.getHeight() * 0.75;
      }

      return new ConnectGame.LineConnection(firstLineX, firstLineY, secondLineX, secondLineY);
    }

    public ConnectGame.Connection findConnectionByKeys(String leftNode, String rightNode) {
      String rightChoice = "";
      String leftChoice = "";
      if (leftNode.equals("A")) {
        leftChoice = shownConnections.get(0).nodeOne;
      }
      if (leftNode.equals("B")) {
        leftChoice = shownConnections.get(1).nodeOne;
      }
      if (leftNode.equals("C")) {
        leftChoice = shownConnections.get(2).nodeOne;
      }
      if (rightNode.equals("1")) {
        rightChoice = shownConnections.get(0).nodeTwo;
      }
      if (rightNode.equals("2")) {
        rightChoice = shownConnections.get(1).nodeTwo;
      }
      if (rightNode.equals("3")) {
        rightChoice = shownConnections.get(2).nodeTwo;
      }
      return new ConnectGame.Connection(leftChoice, rightChoice);
    }

    @Override
    public void interpolate(float f) {
    }

    @Override
    public void render(Graphics g) {
      g.drawSprite(backgroundImage, 0, 0);
      g.setColor(Color.BLACK);
      if (!(isDone)) {
        ConnectGame.Question currentQuestion = questions.get(questionNumber);
        if (isAnswered) {
          Collections.shuffle(firstNodeSequence);
          Collections.shuffle(secondNodeSequence);
          shownConnections.clear();
          shownConnections.add(new ConnectGame.Connection(currentQuestion.connections.get(firstNodeSequence.get(0)).nodeOne, currentQuestion.connections.get(secondNodeSequence.get(0)).nodeTwo));
          shownConnections.add(new ConnectGame.Connection(currentQuestion.connections.get(firstNodeSequence.get(1)).nodeOne, currentQuestion.connections.get(secondNodeSequence.get(1)).nodeTwo));
          shownConnections.add(new ConnectGame.Connection(currentQuestion.connections.get(firstNodeSequence.get(2)).nodeOne, currentQuestion.connections.get(secondNodeSequence.get(2)).nodeTwo));
          isAnswered = false;
        }

        g.drawString("A. " + shownConnections.get(0).nodeOne, (float) (Gdx.graphics.getWidth() * 0.10), (float) (Gdx.graphics.getHeight() * 0.25));
        g.drawString("1. " + shownConnections.get(0).nodeTwo, (float) (Gdx.graphics.getWidth() * 0.75), (float) (Gdx.graphics.getHeight() * 0.25));
        g.drawString("B. " + shownConnections.get(1).nodeOne, (float) (Gdx.graphics.getWidth() * 0.10), (float) (Gdx.graphics.getHeight() * 0.50));
        g.drawString("2. " + shownConnections.get(1).nodeTwo, (float) (Gdx.graphics.getWidth() * 0.75), (float) (Gdx.graphics.getHeight() * 0.50));
        g.drawString("C. " + shownConnections.get(2).nodeOne, (float) (Gdx.graphics.getWidth() * 0.10), (float) (Gdx.graphics.getHeight() * 0.75));
        g.drawString("3. " + shownConnections.get(2).nodeTwo, (float) (Gdx.graphics.getWidth() * 0.75), (float) (Gdx.graphics.getHeight() * 0.75));

        for (int i = 0; i < lineConnections.size(); i++) {
          ConnectGame.LineConnection line = lineConnections.get(i);
          g.drawLineSegment((float) line.firstLineX, (float) line.firstLineY, (float) line.secondLineX, (float) line.secondLineY);
        }

        if (lineConnections.size() > 2) {
          isAnswered = true;
          Set<ConnectGame.Connection> questionSet = new HashSet<ConnectGame.Connection>(currentQuestion.connections);
          Set<ConnectGame.Connection> choiceSet = new HashSet<ConnectGame.Connection>(chosenConnections);
          questionSet.removeAll(choiceSet);
          totalScore += Math.abs(3 - questionSet.size());
          lineConnections.clear();
          chosenConnections.clear();
          nextQuestion();
        }
      } else {
        g.drawString("You final score is " + totalScore, (float) (Gdx.graphics.getWidth() * 0.4), (float) (Gdx.graphics.getHeight() * 0.5));
      }
    }

    public class Connection {
      public String nodeOne;
      public String nodeTwo;

      public Connection(String nodeOne, String nodeTwo) {
        this.nodeOne = nodeOne;
        this.nodeTwo = nodeTwo;
      }

      @Override
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || this.getClass() != o.getClass()) {
          return false;
        }

        ConnectGame.Connection that = (ConnectGame.Connection) o;
        if ((nodeOne != null ? !(((Object) nodeOne).equals(that.nodeOne)) : that.nodeOne != null)) {
          return false;
        }
        if ((nodeTwo != null ? !(((Object) nodeTwo).equals(that.nodeTwo)) : that.nodeTwo != null)) {
          return false;
        }

        return true;
      }

      @Override
      public int hashCode() {
        int result = 0;
        result = 31 * result + ((nodeOne != null ? String.valueOf(nodeOne).hashCode() : 0));
        result = 31 * result + ((nodeTwo != null ? String.valueOf(nodeTwo).hashCode() : 0));
        return result;
      }
    }

    public class Question {
      public ArrayList<ConnectGame.Connection> connections = new ArrayList();

      public void addToList(ConnectGame.Connection connection) {
        connections.add(connection);
      }
    }

    public class LineConnection {
      public double firstLineX;
      public double firstLineY;
      public double secondLineX;
      public double secondLineY;

      public LineConnection(double firstLineX, double firstLineY, double secondLineX, double secondLineY) {
        this.firstLineX = firstLineX;
        this.firstLineY = firstLineY;
        this.secondLineX = secondLineX;
        this.secondLineY = secondLineY;
      }
    }
  }
}
